{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block content %}
    <h1>Redovisning av kursmoment</h1>

    <div>
        <!-- Redovisningstext för kmom -->
        <h2>Kmom01</h2>
        <p>
            Mina tidigare kunskaper och erfarenheter gällande objektorienterad programmering kommer direkt från tidigare
            kurser. Eftersom oopython var fokuserad på objektorientering så lärde jag mig konceptet och även hur man
            applicerar det i praktiken. Jag tycker inte det är speciellt märkligt att arbeta objektorienterad däremot
            kan jag tycka att vissa delar inom objektorientering är lite förvirrande som t.ex. när man ska göra
            klassdiagram och sätta pilar för komposition, kardinalitet m.m.
        </p>
        <p>
            Det första jag tänker på när jag ser objektorienterad programmering är klasser och objekt. För att kunna
            programmera objektorienterat så behöver man veta vad de olika delarna är. Jag ser klassen som en "ritning"
            för objektet. I klassen defineras olika "properties" och när man gör en instans av klassen så kan varje
            instans istället ha olika värden. När det gäller PHPs modell för klasser och objekt så kan jag inte se någon
            större skillnad i strukturen från t.ex. python. Strukturen är mer eller mindre likadan förutom att syntaxen
            är annorlunda.
        </p>
        <p>
            Jag har kikat runt på koden och dess struktur och tycker det är ganska lätt att förstå. Hur man skapar
            routes och olika sidor är väldigt likt ramverk som vi tidigare använt, t.ex. flask och express. Eftersom det
            är väldigt likt i sättet hur man bygger hemsidorna så får jag en direkt uppfattning om hur jag ska
            strukturera upp min sida.
        </p>
        <p>
            Det första positiva jag såg i artikeln "PHP The Right Way" är att den håller sig uppdaterad om vad som är
            "best practices at the present time". Så om man skulle behöva söka fram information så kan det bli fel om
            man använder utdaterade metoder för att lösa sitt problem därav är det väldigt positivt att artikeln håller
            sig uppdaterad. Utöver detta så har jag kollat igenom artikeln och det finns guider om hur man installerar
            vissa verktyg och även bra förklaringar till dem.
        </p>
        <p>
            Min TIL för detta kursmoment är hur man sätter upp en sida med hjälp av ramverket symfony. Förkunskaper och
            tidigare erfarenheter gjorde att det blev enkelt att förstå strukturen och man kunde enkelt skapa routes
            till andra sidor.
        </p>

        <!-- Redovisningstext för kmom -->
        <h2>Kmom02</h2>
        <p>
            Inom objektorientering så använder man arv i klasser för att bl.a. slippa implementera om all funktionalitet
            på nytt. Detta innebär också att man kan implementera extra funktionalitet i subklassen. Ett exempel på
            detta är i min klass "DeckWithJokers" där klass Deck ärvs. I subklassen så lägger jag till två extra kort i
            form av jokrar. Istället för att skriva om hela funktionen så ärvs den via parent klassen och jag kan
            återanvända funktionen och samtidigt implementera extra funktionalitet.
        </p>
        <p>
            Komposition är ett koncept där ett objekt skapar ett annat objekt. Detta innebär att det ena objektet har
            "ägandeskap" över det andra objektet, med andra ord så kan det "ägda" objektet in existera utanför det
            ägande objektet.
        </p>
        <p>
            Enligt min uppfattning så använder man interfaces för att specificera vilka metoder som måste implementeras
            i en klass. Jag är inte helt införstådd om hur man använder interfaces ännu och skulle behöva läsa mer om
            det och använda det i praktiken för att få en bättre förståelse.
        </p>
        <p>
            Eftersom i PHP så kan en klass enbart ärva från en parent klass så om man vill använda sig av flera arv så
            använder man sig av traits. Med andra ord så undviker traits problem med flera arv.
        </p>

        <p>
            I denna uppgift så började jag med att skapa deck klassen och se till så jag kunde få ut alla kort på
            hemsidan. Jag skapade först två arrayer där den ena innehöll kortens färger och den andra innehöll kortens
            namn t.ex. ace, two, three, jack och king. Därefter loopade jag igenom arrayerna och satte ihop namnen med
            färgerna så dem hette ace_of_spades. Med tanke på att det enbart var text så tyckte jag det såg alldeles för
            tråkigt ut så jag letade upp en kortlek i bilder och sparade ner alla 52 kort + två jokrar och gjorde om så
            att namnen blev "ace_of_spades.svg" så att jag enkelt kunde loopa ut alla bilder i twig filerna. Längre fram
            när jag väl löst implementationen av uppgifterna fram till att jag skulle skapa API så insåg jag ett
            problem. Problemet med min lösning var att i json objektet så var det enbart 52 rader med strängar och var
            mer eller mindre en lista med namnen på korten och när jag funderade på hur jag skulle använda det i spel
            logiken i kmom03 så stötte jag på ett till problem. Problemet här är att jag inte hade kunnat räkna ihop
            kortens värde då dem enbart var strängar som låg i en array. Lösningen på detta var att skapa en konstruktor
            i card klassen där jag definerar variablarna, "suits", "value", "title" och "imgPath". Så när jag loopade
            igenom alla korten i den uppdaterade metoden så har alla kort sitt namn "ace, jack osv", value "värdet av
            kortet", sin färg samt imgPath där jag bygger ihop strängarna likadant som tidigare så att jag kan loopa ut
            bilderna i twig. Med denna lösningen så kommer implementationer som t.ex. spelet i kmom03 att bli mycket
            smidigare då jag har alla grund properties som behövs för korten. Överlag så är jag nöjd med min struktur
            och implementation.
        </p>
        <p>
            Min TIL för detta kursmoment är hur jag kunde använda mig av session för att lösa vissa saker. Exempelvis
            när jag gjorde /deal/:players/:cards så "drog" alla players kort ur varsin identisk kortlek istället för ur
            samma. Detta skapade självklart problemet att det fanns flera av samma kort på "spelplanen". Alla players
            hade varsin spader knäckt vilket inte ska vara möjligt så det jag gjorde var att när jag skriver
            /deal/:players/:cards så skapar jag en ny blandad deck och lägger till den i en session('dealDeck'). Sedan
            kör jag en for loop på antal players och anropar funktionen cardsToPlayer som hämtar kortleken från
            sessionen poppar ut antal kort från kortleken och lägger till en ny array som är "playerhand" och när första
            playern har fått sina kort så sätter jag resten av kortleken till session('dealDeck') så att när det delas
            ut kort till nästa player så hämtar den från samma kortlek istället för en ny.
        </p>

        <!-- Redovisningstext för kmom -->
        <h2>Kmom03</h2>
        <p>
            Jag började med att programmera spelet då jag tyckte det skulle bli väldigt roligt och missade först
            problemlösningen då det låg längre ner under uppgiften. Jag gjorde dock det i efterhand med mer eller mindre
            mina initiala tankar på hur jag skulle gå till väga. Jag kan se fördelarna med att modellera innan man
            börjar programmera då man får en grov överblick om hur man kan börja implementera kod för de olika delarna.
            Personligen så brukar jag gilla att köra trial by error istället för att måla upp det teoretiskt.
        </p>

        <p>
            Först började jag med att skapa en GameController där jag kunde lägga alla mina routes som spelet behöver.
            Därefter skapade jag tre olika filer med klasserna BlackJack, Player och Dealer. I player klassen så började
            jag med att enbart ha två properties vilket var hand och score. Detta för att jag började bygga funktionen
            för att dra kort och funktionen för att räkna ihop handens värde. Successivt så började jag implementera
            funktionerna och la till flera properties efter vilken funktionalitet jag ville implementera. T.ex. i Card
            klassen la jag till en bool för att hålla koll på om kortet är fram eller bakvänt samt en till property som
            håller pathen till bilden som är baksidan för ett kort.
        </p>
        <p>
            Överlag så är jag nöjd över hur jag fick ihop spelet dock finns det rum för förbättringar. Jag ville få in
            mera funktionalitet i spelet men tiden räckte dessvärre inte till. T.ex. om de två första korten man får är
            likadana så ville jag lägga till så att man kunde splitta dem och få ett kort extra på de man splittat. Jag
            ville också implementera double down funktion vilket innebär att man dubblar sitt bet och drar ett kort till
            och automatiskt stannar efter det kortet oavsett kort. Något annat jag inte han med att ändra var att man
            skulle betta innan man får korten men nu istället så får både dealern och playern korten först fast bakvända
            och när man bettar så vänds båda korten från playern upp men bara det ena från dealern då man inte ska se
            båda.
        </p>
        <p>
            Jag tycker att det känns bra att koda i ramverket Symfony. Från början så var jag lite skeptiskt till att
            koda i PHP men nu när jag kommit in mera i PHP-kodning så går det ganska smidigt. Jag har inte stött på
            några större problem med Symfony som inte har gått att lösa. Att använda Twig tillsammans med Symfony
            fungerar också väldigt bra. Erfarenheten från att ha använt oss av Twig i design kursen underlättade väldigt
            mycket i denna kursen.
        </p>

        <p>
            Min TIL för detta kursmomentet är hur man arbetar med klasser i PHP. Jag har fått mycket mer erfarenhet
            gällande objektorientering i PHP under detta kursmomentet.
        </p>


        <!-- Redovisningstext för kmom -->
        <h2>Kmom04</h2>
        
        <p>
            Med tanke på att vi skrev ganska många enhetstester för konstruktionerna i oopython så kom jag in väldigt
            fort i PHPUnit. Utöver det så har jag inga svårigheter att skriva tester däremot är jag inte säker på om det
            är bra tester. Jag fick fram hur man mockade session men kunde inte riktigt hitta / förstå hur jag
            skulle mocka request vilket resulterade i att jag inte kunde skriva ett test för "playerBet()" i Player
            klassen. Resultatet av kodtäckningen blev 66.67% på player klassen på grund av detta. Kodtäckningen gällande
            blackjack klassen är däremot 99.03%.
        </p>
        <p>
            Jag kunde testa det mesta i min kod dock som jag nämnde ovan så är jag inte helt säker på att testerna är
            tillräckligt bra. Det största problemet jag hade var att testa metoden med request och eftersom jag inte
            lyckades lista ut hur jag skulle göra det så skippade jag den för tillfället. Jag uppdaterade lite i
            källkoden när jag skulle testa de olika resultaten när man trycker stay. Vid varje resultat så returnerar
            jag en textsträng som jag sedan jämför med i testerna. Anledningen till att jag kunde ändra detta var på
            grund av att jag inte hade någon return vid dessa olika checkarna så det var väldigt enkelt att fixa till.
        </p>
        <p>
            Jag skulle inte säga att testbar kod indentifierar "snygg och ren kod" rakt av. Däremot så kan det vara
            lättare att indentifiera om koden är testbar om det är snygg och ren kod då det blir lättare att läsa koden
            och då kan man lättare se om det går att testa den skulle jag säga.
        </p>
        <p>
            Min TIL för detta kursmomentet är hur man mockar session vid enhetstestning. Det tog ett tag innan jag löste
            hur jag skulle testa när jag använda mig av session. Jag gjorde lite research och kom fram till att man
            kunde mocka session genom att köra "$session = new Session(new MockArraySessionStorage());".
        </p>

        <!-- Redovisningstext för kmom -->
        <h2>Kmom05</h2>
        <p>
            Redovisningstext för kmom
        </p>

        <!-- Redovisningstext för kmom -->
        <h2>Kmom06</h2>
        <p>
            Redovisningstext för kmom
        </p>

        <!-- Redovisningstext för kmom -->
        <h2>Kmom07 - Kmom10</h2>
        <p>
            Redovisningstext för kmom
        </p>
    </div>

{% endblock %}